from argparse import ArgumentParser
import bottle, sqlite3, json, sys, socket
from ctypes import *
from Phidgets.PhidgetException import PhidgetErrorCodes, PhidgetException
from Phidgets.Events.Events import AttachEventArgs, DetachEventArgs, ErrorEventArgs, TemperatureChangeEventArgs
from Phidgets.Devices.TemperatureSensor import TemperatureSensor, ThermocoupleType
from threading import Thread

def getCon():
  return sqlite3.connect('db.sqlite')

def initDb():
  con = getCon()
  con.cursor().execute('''create table if not exists temperature_event (
    timestamp    text,
    sensor_id    text,
    ambient      integer,
    temperature  integer )''')
  con.commit()

def dict_factory(cursor, row):
  d = {}
  for idx, col in enumerate(cursor.description):
    d[col[0]] = row[idx]
  return d

@bottle.route('/sensor.json')
def recent():
  try:
    con = getCon()
    con.row_factory = dict_factory
    c = con.cursor()
    c.execute("""select * from temperature_event
      where datetime(timestamp, 'unixepoch', '+10 seconds') > datetime('now')""")
    events = []
    for row in c:
      events.append(row)
    return json.dumps({ 'events': events })
  except Exception as e:
    return e

@bottle.route('/sensor.html')
def index():
  try:
    return bottle.static_file('sensor.html', root='.')
  except Exception as e:
    return e

@bottle.route('/<filename>.js')
def index(filename):
  return bottle.static_file('%s.js' % filename, root='.')

class SensorThread ( Thread ):

  def __init__(self, sensorId):
    super(SensorThread, self).__init__()
    self.sensorId = sensorId

  def run(self, sensorId=None):
    sensor = self.sensor = TemperatureSensor()
    sensor.openPhidget()
    sensor.waitForAttach(2000)
    if self.sensorId is None: self.sensorId = sensor.getSerialNum()
    sensor.setTemperatureChangeTrigger(0, 0.1)
    sensor.setOnTemperatureChangeHandler(self.onChange)

  def onChange(self, e):
    con = getCon()
    con.cursor().execute("""insert into temperature_event
      values (strftime('%s', 'now'), ?, ?, ?)""",
      (self.sensorId, self.sensor.getAmbientTemperature(), e.temperature))
    con.commit()

def parseArgs():
  parser = ArgumentParser()
  parser.add_argument('--http_host', default='localhost', help='the host name for this web server')
  parser.add_argument('--http_port', default='8080', help='the port number for this web server')
  parser.add_argument('--sensor_id', default=socket.gethostname(), help='a string identifying the sensor')
  return parser.parse_args()

args = parseArgs()
initDb()
SensorThread(args.sensor_id).start()
bottle.run(host=args.http_host, port=args.http_port)

